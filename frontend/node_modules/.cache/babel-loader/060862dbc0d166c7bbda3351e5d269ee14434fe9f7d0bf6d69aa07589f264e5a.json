{"ast":null,"code":"import apiClient from './api';\nclass MenuService {\n  async getRestaurantMenu(restaurantId) {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/menu/`);\n    return response.data;\n  }\n  async getMenuItem(id) {\n    const response = await apiClient.get(`/api/menu-items/${id}/`);\n    return response.data;\n  }\n  async createMenuItem(data) {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n    const response = await apiClient.post('/api/menu-items/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async updateMenuItem(data) {\n    const {\n      id,\n      ...updateData\n    } = data;\n    const formData = new FormData();\n    Object.entries(updateData).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n    const response = await apiClient.patch(`/api/menu-items/${id}/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async deleteMenuItem(id) {\n    await apiClient.delete(`/api/menu-items/${id}/`);\n  }\n  async getMenuCategories(restaurantId) {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/categories/`);\n    return response.data;\n  }\n  async createMenuCategory(restaurantId, data) {\n    const response = await apiClient.post(`/api/restaurants/${restaurantId}/categories/`, data);\n    return response.data;\n  }\n  async updateMenuCategory(categoryId, data) {\n    const response = await apiClient.patch(`/api/menu-categories/${categoryId}/`, data);\n    return response.data;\n  }\n  async deleteMenuCategory(categoryId) {\n    await apiClient.delete(`/api/menu-categories/${categoryId}/`);\n  }\n  async searchMenuItems(restaurantId, query) {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/menu/search/?q=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n}\nexport default new MenuService();","map":{"version":3,"names":["apiClient","MenuService","getRestaurantMenu","restaurantId","response","get","data","getMenuItem","id","createMenuItem","formData","FormData","Object","entries","forEach","key","value","File","append","Array","isArray","JSON","stringify","undefined","toString","post","headers","updateMenuItem","updateData","patch","deleteMenuItem","delete","getMenuCategories","createMenuCategory","updateMenuCategory","categoryId","deleteMenuCategory","searchMenuItems","query","encodeURIComponent"],"sources":["/Users/ondrejhanisch/CascadeProjects/foxi.food/frontend/src/services/menuService.ts"],"sourcesContent":["import apiClient from './api';\n\nexport interface MenuItem {\n  id: number;\n  name: string;\n  description: string;\n  price: string; // Decimal as string\n  category: string;\n  image?: string;\n  is_available: boolean;\n  restaurant: number;\n  ingredients: string[];\n  allergens: string[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface MenuCategory {\n  id: number;\n  name: string;\n  description: string;\n  restaurant: number;\n  order: number;\n  items: MenuItem[];\n}\n\nexport interface CreateMenuItemData {\n  name: string;\n  description: string;\n  price: string;\n  category: string;\n  image?: File;\n  is_available?: boolean;\n  ingredients?: string[];\n  allergens?: string[];\n}\n\nexport interface UpdateMenuItemData extends Partial<CreateMenuItemData> {\n  id: number;\n}\n\nclass MenuService {\n  async getRestaurantMenu(restaurantId: number): Promise<MenuCategory[]> {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/menu/`);\n    return response.data;\n  }\n\n  async getMenuItem(id: number): Promise<MenuItem> {\n    const response = await apiClient.get(`/api/menu-items/${id}/`);\n    return response.data;\n  }\n\n  async createMenuItem(data: CreateMenuItemData): Promise<MenuItem> {\n    const formData = new FormData();\n    \n    Object.entries(data).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n\n    const response = await apiClient.post('/api/menu-items/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  async updateMenuItem(data: UpdateMenuItemData): Promise<MenuItem> {\n    const { id, ...updateData } = data;\n    const formData = new FormData();\n    \n    Object.entries(updateData).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n\n    const response = await apiClient.patch(`/api/menu-items/${id}/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  async deleteMenuItem(id: number): Promise<void> {\n    await apiClient.delete(`/api/menu-items/${id}/`);\n  }\n\n  async getMenuCategories(restaurantId: number): Promise<MenuCategory[]> {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/categories/`);\n    return response.data;\n  }\n\n  async createMenuCategory(restaurantId: number, data: {\n    name: string;\n    description: string;\n    order?: number;\n  }): Promise<MenuCategory> {\n    const response = await apiClient.post(`/api/restaurants/${restaurantId}/categories/`, data);\n    return response.data;\n  }\n\n  async updateMenuCategory(categoryId: number, data: {\n    name?: string;\n    description?: string;\n    order?: number;\n  }): Promise<MenuCategory> {\n    const response = await apiClient.patch(`/api/menu-categories/${categoryId}/`, data);\n    return response.data;\n  }\n\n  async deleteMenuCategory(categoryId: number): Promise<void> {\n    await apiClient.delete(`/api/menu-categories/${categoryId}/`);\n  }\n\n  async searchMenuItems(restaurantId: number, query: string): Promise<MenuItem[]> {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/menu/search/?q=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n}\n\nexport default new MenuService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}