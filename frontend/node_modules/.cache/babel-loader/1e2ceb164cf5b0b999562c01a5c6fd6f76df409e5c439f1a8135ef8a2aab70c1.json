{"ast":null,"code":"import apiClient from './api';\nclass AuthService {\n  async login(credentials) {\n    const response = await apiClient.post('/api/token/', credentials);\n    const {\n      access,\n      refresh\n    } = response.data;\n\n    // Store tokens\n    localStorage.setItem('accessToken', access);\n    localStorage.setItem('refreshToken', refresh);\n\n    // Get user profile\n    const userResponse = await apiClient.get('/api/user/profile/');\n    return {\n      access,\n      refresh,\n      user: userResponse.data\n    };\n  }\n  async register(data) {\n    const response = await apiClient.post('/api/register/', data);\n    return response.data;\n  }\n  async logout() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        await apiClient.post('/api/token/blacklist/', {\n          refresh_token: refreshToken\n        });\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('accessToken');\n      if (!token) return null;\n      const response = await apiClient.get('/api/user/profile/');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) return null;\n      const response = await apiClient.post('/api/token/refresh/', {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n      localStorage.setItem('accessToken', access);\n      return access;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      this.logout();\n      return null;\n    }\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('accessToken');\n    return !!token;\n  }\n  getToken() {\n    return localStorage.getItem('accessToken');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["apiClient","AuthService","login","credentials","response","post","access","refresh","data","localStorage","setItem","userResponse","get","user","register","logout","refreshToken","getItem","refresh_token","error","console","removeItem","getCurrentUser","token","isAuthenticated","getToken"],"sources":["/Users/ondrejhanisch/CascadeProjects/foxi.food/frontend/src/services/authService.ts"],"sourcesContent":["import apiClient from './api';\n\nexport interface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  first_name?: string;\n  last_name?: string;\n}\n\nexport interface AuthResponse {\n  access: string;\n  refresh: string;\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    is_restaurant_owner?: boolean;\n  };\n}\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  first_name: string;\n  last_name: string;\n  is_restaurant_owner?: boolean;\n}\n\nclass AuthService {\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await apiClient.post('/api/token/', credentials);\n    const { access, refresh } = response.data;\n    \n    // Store tokens\n    localStorage.setItem('accessToken', access);\n    localStorage.setItem('refreshToken', refresh);\n    \n    // Get user profile\n    const userResponse = await apiClient.get('/api/user/profile/');\n    \n    return {\n      access,\n      refresh,\n      user: userResponse.data,\n    };\n  }\n\n  async register(data: RegisterData): Promise<AuthResponse> {\n    const response = await apiClient.post('/api/register/', data);\n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        await apiClient.post('/api/token/blacklist/', {\n          refresh_token: refreshToken,\n        });\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n    }\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    try {\n      const token = localStorage.getItem('accessToken');\n      if (!token) return null;\n\n      const response = await apiClient.get('/api/user/profile/');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n\n  async refreshToken(): Promise<string | null> {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) return null;\n\n      const response = await apiClient.post('/api/token/refresh/', {\n        refresh: refreshToken,\n      });\n\n      const { access } = response.data;\n      localStorage.setItem('accessToken', access);\n      return access;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      this.logout();\n      return null;\n    }\n  }\n\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('accessToken');\n    return !!token;\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('accessToken');\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}