{"ast":null,"code":"import apiClient from './api';\nexport let OrderStatus = /*#__PURE__*/function (OrderStatus) {\n  OrderStatus[\"PENDING\"] = \"pending\";\n  OrderStatus[\"CONFIRMED\"] = \"confirmed\";\n  OrderStatus[\"PREPARING\"] = \"preparing\";\n  OrderStatus[\"READY\"] = \"ready\";\n  OrderStatus[\"OUT_FOR_DELIVERY\"] = \"out_for_delivery\";\n  OrderStatus[\"DELIVERED\"] = \"delivered\";\n  OrderStatus[\"CANCELLED\"] = \"cancelled\";\n  return OrderStatus;\n}({});\nclass OrderService {\n  async createOrder(data) {\n    const response = await apiClient.post('/api/orders/', data);\n    return response.data;\n  }\n  async getOrders(params) {\n    const searchParams = new URLSearchParams();\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined) {\n          searchParams.append(key, value.toString());\n        }\n      });\n    }\n    const response = await apiClient.get(`/api/orders/?${searchParams}`);\n    return response.data;\n  }\n  async getOrderById(id) {\n    const response = await apiClient.get(`/api/orders/${id}/`);\n    return response.data;\n  }\n  async updateOrderStatus(orderId, data) {\n    const response = await apiClient.patch(`/api/orders/${orderId}/status/`, data);\n    return response.data;\n  }\n  async cancelOrder(orderId, reason) {\n    const response = await apiClient.patch(`/api/orders/${orderId}/cancel/`, {\n      reason\n    });\n    return response.data;\n  }\n  async getMyOrders(page = 1) {\n    const response = await apiClient.get(`/api/orders/my-orders/?page=${page}`);\n    return response.data;\n  }\n  async getRestaurantOrders(restaurantId, params) {\n    const searchParams = new URLSearchParams();\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined) {\n          searchParams.append(key, value.toString());\n        }\n      });\n    }\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/orders/?${searchParams}`);\n    return response.data;\n  }\n  async getOrderStatistics(restaurantId, period = '30d') {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/order-stats/?period=${period}`);\n    return response.data;\n  }\n\n  // Real-time order updates (WebSocket would be better, but this is a polling alternative)\n  async subscribeToOrderUpdates(orderId, onUpdate, interval = 5000) {\n    const poll = async () => {\n      try {\n        const order = await this.getOrderById(orderId);\n        onUpdate(order);\n      } catch (error) {\n        console.error('Error polling order updates:', error);\n      }\n    };\n    const intervalId = setInterval(poll, interval);\n\n    // Initial poll\n    poll();\n\n    // Return cleanup function\n    return () => clearInterval(intervalId);\n  }\n  getOrderStatusDisplayName(status) {\n    const statusMap = {\n      [OrderStatus.PENDING]: 'Čeká na potvrzení',\n      [OrderStatus.CONFIRMED]: 'Potvrzeno',\n      [OrderStatus.PREPARING]: 'Připravuje se',\n      [OrderStatus.READY]: 'Připraveno k vyzvednutí',\n      [OrderStatus.OUT_FOR_DELIVERY]: 'Na cestě',\n      [OrderStatus.DELIVERED]: 'Doručeno',\n      [OrderStatus.CANCELLED]: 'Zrušeno'\n    };\n    return statusMap[status] || status;\n  }\n}\nexport default new OrderService();","map":{"version":3,"names":["apiClient","OrderStatus","OrderService","createOrder","data","response","post","getOrders","params","searchParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","get","getOrderById","id","updateOrderStatus","orderId","patch","cancelOrder","reason","getMyOrders","page","getRestaurantOrders","restaurantId","getOrderStatistics","period","subscribeToOrderUpdates","onUpdate","interval","poll","order","error","console","intervalId","setInterval","clearInterval","getOrderStatusDisplayName","status","statusMap","PENDING","CONFIRMED","PREPARING","READY","OUT_FOR_DELIVERY","DELIVERED","CANCELLED"],"sources":["/Users/ondrejhanisch/CascadeProjects/foxi.food/frontend/src/services/orderService.ts"],"sourcesContent":["import apiClient from './api';\n\nexport interface OrderItem {\n  id?: number;\n  menu_item: number;\n  menu_item_details?: {\n    id: number;\n    name: string;\n    price: string;\n    image?: string;\n  };\n  quantity: number;\n  special_instructions?: string;\n  price: string; // Total price for this item (quantity * unit_price)\n}\n\nexport interface Order {\n  id: number;\n  restaurant: number;\n  restaurant_details?: {\n    id: number;\n    name: string;\n    address: string;\n    phone: string;\n  };\n  customer: number;\n  customer_details?: {\n    id: number;\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n  };\n  items: OrderItem[];\n  status: OrderStatus;\n  total_amount: string;\n  delivery_address: string;\n  delivery_phone: string;\n  special_instructions?: string;\n  estimated_delivery_time?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport enum OrderStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  PREPARING = 'preparing',\n  READY = 'ready',\n  OUT_FOR_DELIVERY = 'out_for_delivery',\n  DELIVERED = 'delivered',\n  CANCELLED = 'cancelled',\n}\n\nexport interface CreateOrderData {\n  restaurant: number;\n  items: {\n    menu_item: number;\n    quantity: number;\n    special_instructions?: string;\n  }[];\n  delivery_address: string;\n  delivery_phone: string;\n  special_instructions?: string;\n}\n\nexport interface UpdateOrderStatusData {\n  status: OrderStatus;\n  estimated_delivery_time?: string;\n}\n\nclass OrderService {\n  async createOrder(data: CreateOrderData): Promise<Order> {\n    const response = await apiClient.post('/api/orders/', data);\n    return response.data;\n  }\n\n  async getOrders(params?: {\n    status?: OrderStatus;\n    restaurant?: number;\n    page?: number;\n    limit?: number;\n  }): Promise<{\n    results: Order[];\n    count: number;\n    next: string | null;\n    previous: string | null;\n  }> {\n    const searchParams = new URLSearchParams();\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined) {\n          searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const response = await apiClient.get(`/api/orders/?${searchParams}`);\n    return response.data;\n  }\n\n  async getOrderById(id: number): Promise<Order> {\n    const response = await apiClient.get(`/api/orders/${id}/`);\n    return response.data;\n  }\n\n  async updateOrderStatus(orderId: number, data: UpdateOrderStatusData): Promise<Order> {\n    const response = await apiClient.patch(`/api/orders/${orderId}/status/`, data);\n    return response.data;\n  }\n\n  async cancelOrder(orderId: number, reason?: string): Promise<Order> {\n    const response = await apiClient.patch(`/api/orders/${orderId}/cancel/`, {\n      reason,\n    });\n    return response.data;\n  }\n\n  async getMyOrders(page = 1): Promise<{\n    results: Order[];\n    count: number;\n    next: string | null;\n    previous: string | null;\n  }> {\n    const response = await apiClient.get(`/api/orders/my-orders/?page=${page}`);\n    return response.data;\n  }\n\n  async getRestaurantOrders(restaurantId: number, params?: {\n    status?: OrderStatus;\n    page?: number;\n    date_from?: string;\n    date_to?: string;\n  }): Promise<{\n    results: Order[];\n    count: number;\n    next: string | null;\n    previous: string | null;\n  }> {\n    const searchParams = new URLSearchParams();\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined) {\n          searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/orders/?${searchParams}`);\n    return response.data;\n  }\n\n  async getOrderStatistics(restaurantId: number, period = '30d'): Promise<{\n    total_orders: number;\n    total_revenue: string;\n    average_order_value: string;\n    orders_by_status: Record<OrderStatus, number>;\n    revenue_by_day: Array<{\n      date: string;\n      revenue: string;\n      orders: number;\n    }>;\n  }> {\n    const response = await apiClient.get(`/api/restaurants/${restaurantId}/order-stats/?period=${period}`);\n    return response.data;\n  }\n\n  // Real-time order updates (WebSocket would be better, but this is a polling alternative)\n  async subscribeToOrderUpdates(\n    orderId: number,\n    onUpdate: (order: Order) => void,\n    interval = 5000\n  ): Promise<() => void> {\n    const poll = async () => {\n      try {\n        const order = await this.getOrderById(orderId);\n        onUpdate(order);\n      } catch (error) {\n        console.error('Error polling order updates:', error);\n      }\n    };\n\n    const intervalId = setInterval(poll, interval);\n    \n    // Initial poll\n    poll();\n\n    // Return cleanup function\n    return () => clearInterval(intervalId);\n  }\n\n  getOrderStatusDisplayName(status: OrderStatus): string {\n    const statusMap: Record<OrderStatus, string> = {\n      [OrderStatus.PENDING]: 'Čeká na potvrzení',\n      [OrderStatus.CONFIRMED]: 'Potvrzeno',\n      [OrderStatus.PREPARING]: 'Připravuje se',\n      [OrderStatus.READY]: 'Připraveno k vyzvednutí',\n      [OrderStatus.OUT_FOR_DELIVERY]: 'Na cestě',\n      [OrderStatus.DELIVERED]: 'Doručeno',\n      [OrderStatus.CANCELLED]: 'Zrušeno',\n    };\n    return statusMap[status] || status;\n  }\n}\n\nexport default new OrderService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}