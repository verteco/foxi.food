{"ast":null,"code":"import apiClient from './api';\nclass RestaurantService {\n  async getAllRestaurants(page = 1, search = '', cuisine_type = '') {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      ...(search && {\n        search\n      }),\n      ...(cuisine_type && {\n        cuisine_type\n      })\n    });\n    const response = await apiClient.get(`/api/restaurants/?${params}`);\n    return response.data;\n  }\n  async getRestaurantById(id) {\n    const response = await apiClient.get(`/api/restaurants/${id}/`);\n    return response.data;\n  }\n  async createRestaurant(data) {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n    const response = await apiClient.post('/api/restaurants/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async updateRestaurant(data) {\n    const {\n      id,\n      ...updateData\n    } = data;\n    const formData = new FormData();\n    Object.entries(updateData).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n    const response = await apiClient.patch(`/api/restaurants/${id}/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async deleteRestaurant(id) {\n    await apiClient.delete(`/api/restaurants/${id}/`);\n  }\n  async getMyRestaurant() {\n    try {\n      const response = await apiClient.get('/api/restaurants/my-restaurant/');\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  async updateOpeningHours(restaurantId, openingHours) {\n    const response = await apiClient.put(`/api/restaurants/${restaurantId}/opening-hours/`, {\n      opening_hours: openingHours\n    });\n    return response.data;\n  }\n  async getCuisineTypes() {\n    const response = await apiClient.get('/api/restaurants/cuisine-types/');\n    return response.data;\n  }\n  async getPopularRestaurants(limit = 6) {\n    const response = await apiClient.get(`/api/restaurants/popular/?limit=${limit}`);\n    return response.data;\n  }\n  async searchRestaurants(query) {\n    const response = await apiClient.get(`/api/restaurants/search/?q=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n}\nexport default new RestaurantService();","map":{"version":3,"names":["apiClient","RestaurantService","getAllRestaurants","page","search","cuisine_type","params","URLSearchParams","toString","response","get","data","getRestaurantById","id","createRestaurant","formData","FormData","Object","entries","forEach","key","value","File","append","undefined","post","headers","updateRestaurant","updateData","patch","deleteRestaurant","delete","getMyRestaurant","error","_error$response","status","updateOpeningHours","restaurantId","openingHours","put","opening_hours","getCuisineTypes","getPopularRestaurants","limit","searchRestaurants","query","encodeURIComponent"],"sources":["/Users/ondrejhanisch/CascadeProjects/foxi.food/frontend/src/services/restaurantService.ts"],"sourcesContent":["import apiClient from './api';\n\nexport interface Restaurant {\n  id: number;\n  name: string;\n  description: string;\n  cuisine_type: string;\n  address: string;\n  phone: string;\n  email: string;\n  logo?: string;\n  cover_image?: string;\n  rating: number;\n  is_active: boolean;\n  opening_hours: OpeningHours[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface OpeningHours {\n  id?: number;\n  day_of_week: number; // 0-6 (Monday to Sunday)\n  opening_time: string; // HH:MM format\n  closing_time: string; // HH:MM format\n  is_closed: boolean;\n}\n\nexport interface CreateRestaurantData {\n  name: string;\n  description: string;\n  cuisine_type: string;\n  address: string;\n  phone: string;\n  email: string;\n  logo?: File;\n  cover_image?: File;\n}\n\nexport interface UpdateRestaurantData extends Partial<CreateRestaurantData> {\n  id: number;\n}\n\nclass RestaurantService {\n  async getAllRestaurants(page = 1, search = '', cuisine_type = ''): Promise<{\n    results: Restaurant[];\n    count: number;\n    next: string | null;\n    previous: string | null;\n  }> {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      ...(search && { search }),\n      ...(cuisine_type && { cuisine_type }),\n    });\n\n    const response = await apiClient.get(`/api/restaurants/?${params}`);\n    return response.data;\n  }\n\n  async getRestaurantById(id: number): Promise<Restaurant> {\n    const response = await apiClient.get(`/api/restaurants/${id}/`);\n    return response.data;\n  }\n\n  async createRestaurant(data: CreateRestaurantData): Promise<Restaurant> {\n    const formData = new FormData();\n    \n    Object.entries(data).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n\n    const response = await apiClient.post('/api/restaurants/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  async updateRestaurant(data: UpdateRestaurantData): Promise<Restaurant> {\n    const { id, ...updateData } = data;\n    const formData = new FormData();\n    \n    Object.entries(updateData).forEach(([key, value]) => {\n      if (value instanceof File) {\n        formData.append(key, value);\n      } else if (value !== undefined) {\n        formData.append(key, value.toString());\n      }\n    });\n\n    const response = await apiClient.patch(`/api/restaurants/${id}/`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  async deleteRestaurant(id: number): Promise<void> {\n    await apiClient.delete(`/api/restaurants/${id}/`);\n  }\n\n  async getMyRestaurant(): Promise<Restaurant | null> {\n    try {\n      const response = await apiClient.get('/api/restaurants/my-restaurant/');\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  async updateOpeningHours(restaurantId: number, openingHours: OpeningHours[]): Promise<OpeningHours[]> {\n    const response = await apiClient.put(`/api/restaurants/${restaurantId}/opening-hours/`, {\n      opening_hours: openingHours,\n    });\n    return response.data;\n  }\n\n  async getCuisineTypes(): Promise<string[]> {\n    const response = await apiClient.get('/api/restaurants/cuisine-types/');\n    return response.data;\n  }\n\n  async getPopularRestaurants(limit = 6): Promise<Restaurant[]> {\n    const response = await apiClient.get(`/api/restaurants/popular/?limit=${limit}`);\n    return response.data;\n  }\n\n  async searchRestaurants(query: string): Promise<Restaurant[]> {\n    const response = await apiClient.get(`/api/restaurants/search/?q=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n}\n\nexport default new RestaurantService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}